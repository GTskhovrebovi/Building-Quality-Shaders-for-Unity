// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitializeOffsets;
#pragma kernel ApplyOffsets

struct SnowActorInfo
{
    float3 position;
    float radius;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _SnowOffset;
uniform float2 _SnowResolution;
uniform float _SnowFalloff;

StructuredBuffer<SnowActorInfo> _SnowActors;
uniform int _SnowActorCount;

[numthreads(8,8,1)]
void InitializeOffsets(uint3 id : SV_DispatchThreadID)
{
    _SnowOffset[id.xy] = 1.0f;
}

float inverseLerp(float a, float b, float t)
{
    return (t - a) / (b - a);
}

[numthreads(8,8,1)]
void ApplyOffsets (uint3 id : SV_DispatchThreadID)
{
    for (int i = 0; i < _SnowActorCount; i++)
    {
        float2 currentUV = float2(id.x, id.y) / _SnowResolution;

        float dist = distance(currentUV, 1.0f - _SnowActors[i].position.xz);
        
        if (dist < _SnowActors[i].radius + _SnowFalloff)
        {
            float heightMod = inverseLerp(0, _SnowFalloff, dist - _SnowActors[i].radius);
            heightMod = saturate(heightMod);
            float newHeight = lerp(_SnowActors[i].position.y, _SnowOffset[id.xy], heightMod);
            _SnowOffset[id.xy] = min(newHeight, _SnowOffset[id.xy]);
        }
    }
}
